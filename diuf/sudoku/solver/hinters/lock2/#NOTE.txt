LockingGeneralised was boosted from the latest Sukaku by Nicolas Juillerat,
into my version of Sudoku Explainer by Keith Corlett in Jan 2021.

I believe LockingGeneralised originates from SudokuMonster, which is another
open-source Sudoku solver. Sukaku called it VLocking, which is nonsensical to
me, so I renamed it LockingGeneralised; which is what it does: both Pointing &
Claiming, and supports extra constraints, which I don't have, or want.

I've retained the technique but refined how it works: original was inefficient.
My implementation first gets all cells in the grid which maybe value, and
retainsAll those seen by each cell; and cell.buds purposely excludes the cell
itself. The old "I am not my own sibling" rule.

Then the original removed each given cell, which is NEVER there! then added a
removable potential for each cell which maybe value; where-as I started with
them, so I create redPots (removable Cell=>Values) of any/all remaining.

So yeah, mines a bit more efficient WITH getIdxs caching; without the cache the
original is probably faster, coz you'd have to get cells in grid which maybe
value 27 times more often. sigh.
